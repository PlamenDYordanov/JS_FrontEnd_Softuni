Array:

beehive like a Stack:
push: add in the end
pop: remove from end
shift: remove from beginning
unshift: add from beginning

spread syntax -> '...' makes shallow copy;
---------------------------
MUTATORS
Splice():
const myArr = [10, 20, 30, 40, 50];
const splice = myArr.splice(3, 2);
splice = [40, 50];
myArr = [10, 20, 30];
const splice = myArr.splice(3, 0, 23); we also can add!
myArr = [10, 20, 30, 23, 40, 50];~

Fill():
const myArr = [10, 20, 30, 40, 50];
myArr.fill(6)
const myArr = [6, 6, 6, 6, 6];
myArr.fill(0,2,4);
myArr = [10, 20, 0, 0, 0];

Reverse():
myArr.reverse();
myArr = [50, 40, 30, 20, 10];

Sort():
myArr = [1, 5, 3, 2];
by default(alphabetical(ASCI code))
myArr.sort((a,b) => a-b);
myArr = [1, 2, 3, 5];
myArr.sort((a,b) => b-a);
myArr = [5, 3, 2, 1];

lexicographical ordering:
myArr = ['jonh', 'annie', 'Charlie'];
myArr.sort((a,b) => a.localeCompare(b));
myArr = ['annie', 'Charlie', 'jonh'];
------------------------------
ACCESSORS
join():
.toString() all elements
.join(', '->(separator))

concat():
const myArr = [1, 5, 2];
const arr = [10, 20, 50];
const result = myArr.concat(arr); same like this -> const result = [...Myarr, ...arr](its better solution);
result = [1, 5, 2, 10, 20, 50];

Slice():
return shallow copy
const myArr = [10, 20, 30, 40, 50];
const result = myArr.slice(3);
result = [40, 50];
const myArr = [10, 20, 30, 40, 50];
const result = myArr.slice(2 ,5)(last index is exclusive);
result = [30, 40, 50];

Includes():
return: true or false;
includes(value, index);


IndexOf():
return: value;
const myArr = [10, 20, 30, 40, 50];
myArr.indexOf(30);
return 2;
myArr.indexOf(90);
return -1;
------------------------------
ITERATION
ForEach(): 
const myArr = [10, 20, 30, 40, 50]; 
const copy = [];
myArr.forEach(item => {copy.push(item);});

Map():
return: transform elements from old array to new one;
const myArr = [10, 20, 30, 40, 50];
myArr.map(e => e + 1); 
myArr = [11, 21, 31, 41, 51];

Some():
return: true or false;
const myArr = [10, 20, 30, 40, 50]; 
myArr.some(e => e % 5 == 0);

Find()
return: element (first coincidence);
const myArr = [10, 20, 30, 40, 50]; 
myArr.find(e => e % 5 == 0);
find = 10;

Filtter()
return: array (all coincidence);
const myArr = [10, 20, 30, 40, 50]; 
myArr.fillter(e => e % 5 == 0);
find = [10, 20, 30, 40, 50]

Every()
return: true(if all elements in array meets the condition) or false
const myArr = [10, 20, 30, 40, 50]; 
myArr.every(e => e % 5 == 0);
return true;
myArr.every(e => e % 3 == 0);
retun false;
-----------------------------
Reduce()
const myArr = [10, 20, 30, 40, 50]; 
myArr.reduce((a, v, index, arr) => a + v, 0);





